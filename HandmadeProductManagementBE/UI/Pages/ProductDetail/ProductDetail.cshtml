@page
@using UI.Pages.Shared
@model UI.Pages.ProductDetail.ProductDetailModel

@{
}
@{
    ViewData["Title"] = "ProductDetail";
    var productItems = Model.productDetail.ProductItems;
}

<style>
    /* Ẩn nút tăng giảm trên Chrome, Safari và Edge */
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Ẩn nút tăng giảm trên Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>
@{
    var errorModel = new ErrorMessageModel
            {
                ErrorMessage = Model.ErrorMessage,
                ErrorDetail = Model.ErrorDetail
            };
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <partial name="_ErrorMessage" model="errorModel" />
}
<div class="flex flex-wrap p-6">
    <!-- Left side: Product Images -->
    <div class="z-10 fixed right-0 rounded-full bottom-0 mr-5 mb-5 sm:mr-6 sm:mb-6 shadow-2xl">
        <div class="flex items-center justify-center bg-teal-500 rounded-full opacity-75 p-3 sm:p-4">
            <svg class="fill-current text-gray-200 h-6 w-6 sm:h-10 sm:w-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z" />
                <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z" />
            </svg>
        </div>
        <div class="absolute left-0 top-0 ml-3 mt-3 sm:ml-4 sm:mt-4">
            <div class="flex h-3 w-3">
                <span class="animate-ping absolute inline-flex h-2 w-2 sm:h-full sm:w-full rounded-full bg-pink-400 opacity-75"></span>
                <span class="relative inline-flex rounded-full h-2 w-2 sm:h-3 sm:w-3 bg-pink-500"></span>
            </div>
        </div>
    </div>

    <div class="w-full md:w-1/2 p-4">
        <div class="mb-4">
            <!-- Large Image -->
            <img src="@Model.productDetail?.ProductImageUrls.FirstOrDefault()" alt="Product Image" class="mx-auto h-[550px] w-[600px] rounded-lg object-cover shadow-md">
        </div>
        <div class="flex space-x-2">
            <!-- Small Images -->
            @for (int i = 1; i < Math.Min(4, Model.productDetail.ProductImageUrls.Count); i++)
            {
            <img src="@Model.productDetail.ProductImageUrls[i]"
                 alt="Product Thumbnail"
                 class="h-20 w-1/5 cursor-pointer rounded-lg object-cover shadow-md">
            }
        </div>
    </div>

    <!-- Right side: Product Details -->
    <div class="w-full md:w-1/2 p-4 space-y-6">
        <a href="javascript:void(0);" onclick="viewProductList()"
           class="flex items-center px-4 py-2 text-gray-600 bg-gray-200 rounded-lg hover:text-gray-800 font-medium transition duration-300">
            <i class="fa fa-arrow-left mr-2"></i> Back to Products
        </a>
        <!-- Product Name -->
        <h1 class="text-3xl font-bold text-gray-800">@Model.productDetail?.Name</h1>
        <h2 class="text-3xl font-bold text-gray-800">@Model.productDetail?.Description</h2>
        <!-- Product Rating -->
        <div class="rating-stars flex items-center space-x-1">
            <span class="text-lg text-gray-700">@Model.productDetail?.Rating.ToString("0.0")/5</span> <!-- Display rating in "4.6/5" format -->
            @for (int i = 1; i <= 5; i++)
            {
                if (i <= (Model.productDetail?.Rating ?? 0))
                {
                    <i class="fa fa-star" style="color: gold;"></i> <!-- Yellow star -->
                }
                else
                {
                    <i class="fa fa-star" style="color: gray;"></i> <!-- Gray star -->
                }
            }
        </div>

        <!-- Product Price -->
        <div class="flex items-center space-x-4">
            @if (Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice != null
            && Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice
            < Model.productDetail?.ProductItems?.FirstOrDefault()?.Price)
            {
                <span class="text-2xl font-semibold text-red-500">
                    ₫@Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice?.ToString("N0")
                </span>
                <span class="text-lg text-gray-400 line-through">
                    ₫@Model.productDetail?.ProductItems?.FirstOrDefault()?.Price.ToString("N0")
                </span>
            }
            else
            {
                <span class="text-2xl font-semibold text-red-500">
                    ₫@Model.productDetail?.ProductItems?.FirstOrDefault()?.Price.ToString("N0")
                </span>
            }
        </div>



        <!-- Product Materials -->
        <div>
            <div class="mt-2 flex space-x-2">
                @foreach (var variation in Model.VariationOptions)
                {
                    <div class="variation-options">
                        <span class="rounded-full bg-gray-200 px-3 py-1 text-sm">@variation.Name</span>
                        <div class="mt-1">
                            @if (variation.Options != null && variation.Options.Any())
                            {
                                foreach (var option in variation.Options)
                                {
                                    <input type="radio"
                                           id="@option.Id"
                                           name="@variation.Name"
                                           value="@option.Name"
                                           class="mr-2"
                                           onclick="handleRadioClick(this)"
                                           onchange="updateProductInfo()"
                                           data-variation-name="@variation.Name" />
                                    <label for="@option.Id" class="text-sm">@option.Name</label>
                                }
                            }
                            else
                            {
                                <span class="text-sm text-gray-500">No options available</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="price-container">
            <span id="price" class="text-lg font-bold text-gray-800"></span>
            <span id="discountedPrice" class="ml-2 hidden text-lg font-bold text-red-600"></span> <!-- Định nghĩa giá giảm -->
        </div>
        <span id="remainingQuantity" class="text-sm text-gray-600"></span>
        <span id="message"class="text-sm text-gray-600"></span>
        
        <div class="container mx-auto p-4">
            <div class="flex items-center space-x-4">
                <h2 class="text-lg font-semibold text-gray-800">Quantity</h2>
                <div class="flex items-center border border-gray-300 rounded-lg">
                    <button onclick="decreaseQuantity()" class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded-l-lg focus:outline-none">-</button>
                    <!-- Định nghĩa số lượng có thể nhập -->
                     <input id="quantity" type="number" value="1" min="1" max="50" class="w-16 px-4 py-2 text-center text-gray-800 focus:outline-none" oninput="handleInputChange()" />
 
                    <button onclick="increaseQuantity()" class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded-r-lg focus:outline-none">+</button>
                </div>
            </div>
        </div>
        <!-- Buttons -->
        <div class="flex space-x-4">
            <button class="flex-1 rounded-lg bg-blue-500 px-4 py-3 text-white hover:bg-blue-600">
                <i class="fa fa-shopping-cart mr-2"></i> Add to Cart
            </button>
        </div>
    </div>
</div>

<h1 class="mb-4 text-center text-4xl font-bold text-red-600">Product Ratings</h1>

<div class="space-y-4">
    @foreach (var review in Model.Reviews)
    {
        <div class="rounded-lg border border-gray-300 bg-white p-4 shadow-md">
            <div class="flex flex-col">
                <span class="font-semibold">@(Model.Users.FirstOrDefault(user => user.Id == review.UserId)?.UserName ?? "Unknown User")</span>
                <span class="text-sm text-gray-500">@review.Date?.ToString("g")</span>
                <div class="flex items-center">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <svg class="h-5 w-5 @(i <= review.Rating ? "text-yellow-500" : "text-gray-300")" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 .587l3.668 7.568 8.235 1.199-5.964 5.222L19.339 24 12 20.812 4.661 24l1.331-9.424-5.964-5.222 8.235-1.199L12 .587z" />
                        </svg>
                    }
                </div>
                <p class="mt-2">@review.Content</p>
            </div>

            <!-- Reply Section with Shop ID -->
            @if (review.Reply != null){
            <div class="relative ml-4 mt-4 rounded-lg border border-gray-300 bg-gray-50 p-2">
                <div class="mb-2 font-semibold text-gray-700">@(Model.Shops.FirstOrDefault(shop => shop.Id == review.Reply?.ShopId)?.Name ?? "Unknown Shop")</div>
                    <p>@review.Reply.Content</p>
            </div>
            }
        </div>
    }
</div>

@if (Model.TotalPages > 1)
{
    <nav class="mt-4">
        <ul class="flex justify-center space-x-2">
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                    <a class="rounded-md border border-gray-300 px-4 py-2" class="page-link" asp-page="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }
        </ul>
    </nav>
}



<!-- Include Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script>
    let quantity = 1; // Biến để lưu số lượng
    let maxQuantity = 50; // Số lượng tối đa của productItem

    function updateQuantityDisplay() {
        // Cập nhật hiển thị số lượng
        document.getElementById('quantity').value = quantity;
    }
    function decreaseQuantity() {
        if (quantity > 1) { // Đảm bảo số lượng không âm
            quantity--; // Giảm số lượng
            updateQuantityDisplay(); // Cập nhật hiển thị
        }
    }

    function increaseQuantity() {
        if (quantity < maxQuantity) { // Không vượt quá số lượng tối đa
            quantity++; // Tăng số lượng
            updateQuantityDisplay(); // Cập nhật hiển thị
        } else {
            // Thông báo cho người dùng khi vượt quá số lượng
            alert(`You cannot increase the quantity beyond ${maxQuantity}.`);
        }
    }
    function handleInputChange() {
        const input = document.getElementById('quantity');
        let value = parseInt(input.value, 10);

        // Kiểm tra nếu giá trị nhập vào không hợp lệ hoặc nhỏ hơn 1
        if (isNaN(value) || value < 1) {
            quantity = 1; // Đặt giá trị về 1 nếu không hợp lệ
        } else if (value > maxQuantity) {
            quantity = maxQuantity; // Giới hạn ở số lượng tối đa
            alert(`You cannot increase the quantity beyond ${maxQuantity}.`);
        } else {
            quantity = value; // Cập nhật số lượng
        }

        updateQuantityDisplay();
    }
    // Định dạng giá theo kiểu Việt Nam
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    };

    let lastChecked = null;

    function handleRadioClick(radio) {
        // Nếu radio đã được chọn và là tùy chọn đã chọn trước đó, bỏ chọn nó
        if (lastChecked === radio) {
            radio.checked = false; // Bỏ chọn radio
            lastChecked = null; // Đặt lại biến theo dõi
        } else {
            // Cập nhật biến theo dõi
            lastChecked = radio; // Lưu tùy chọn đã chọn
        }

        // Gọi hàm cập nhật thông tin sản phẩm
        updateProductInfo();
    }

    const productItems = @Html.Raw(Json.Serialize(productItems));



    // Hàm cập nhật giá dựa trên lựa chọn của người dùng
    function updateProductInfo() {
        // Tạo một đối tượng lưu trữ các lựa chọn hiện tại của người dùng
        const selectedOptions = {};

        // Duyệt qua tất cả các radio button đang được chọn
        document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
            selectedOptions[input.name] = input.value;
        });

        // Tìm sản phẩm khớp với các tùy chọn đã chọn
        const matchingProduct = productItems.find(item =>
            item.configurations.every(config =>
                selectedOptions[config.variationName] === config.optionName
            )
        );
        
        // Cập nhật giá hiển thị
        const priceElement = document.getElementById("price");
        const discountedPriceElement = document.getElementById("discountedPrice");
        const remainingQuantityElement = document.getElementById("remainingQuantity");

        if (matchingProduct)
        {
            remainingQuantityElement.textContent = `Remaining Quantity: ${matchingProduct.quantityInStock}`;
            // Cập nhật số lượng tối đa

            // Kiểm tra nếu có discountedPrice
            if (matchingProduct.discountedPrice) {
                // Hiển thị giá gốc dạng gạch ngang và giá giảm
                priceElement.innerHTML = `<s>${formatCurrency(matchingProduct.price)}</s>`;
                discountedPriceElement.textContent = `${formatCurrency(matchingProduct.discountedPrice)}`;
            } else {
                // Hiển thị giá gốc khi không có giá giảm
                priceElement.textContent = `${formatCurrency(matchingProduct.price)}`;
                discountedPriceElement.textContent = ""; // Ẩn giá giảm
            }
            maxQuantity = matchingProduct.quantityInStock;
            quantity = Math.min(quantity, maxQuantity); // Đảm bảo số lượng không vượt quá số lượng tối đa
            updateQuantityDisplay(); // Cập nhật hiển thị số lượng
        }
            
        updateVariationOptions(selectedOptions); // Gọi hàm cập nhật các tùy chọn
    }

    function updateVariationOptions(selectedOptions) {
        // Duyệt qua tất cả các biến thể
        document.querySelectorAll('.variation-options').forEach(variationContainer => {
            const variationName = variationContainer.querySelector('span').textContent.trim();
            const availableOptions = new Set();

            // Kiểm tra các sản phẩm có các tùy chọn phù hợp
            productItems.forEach(product => {
                const configurations = product.configurations;

                // Kiểm tra xem sản phẩm có khớp với các tùy chọn đã chọn hay không
                const matches = Object.keys(selectedOptions).every(selectedName => {
                    return selectedOptions[selectedName] === configurations.find(config => config.variationName === selectedName)?.optionName;
                });

                if (matches) {
                    configurations.forEach(config => {
                        if (config.variationName === variationName) {
                            availableOptions.add(config.optionName);
                        }
                    });
                }
            });

            // Cập nhật hiển thị các radio button
            variationContainer.querySelectorAll('input[type="radio"]').forEach(input => {
                const label = document.querySelector(`label[for="${input.id}"]`); // Tìm label dựa trên id của input

                // Đặt lại hiển thị cho tất cả radio
                //label.style.display = 'none'; // Ẩn label
                input.disabled = true; // Tắt khả năng chọn

                // Nếu biến thể đã chọn là một trong các lựa chọn hiện tại, luôn hiển thị
                if (selectedOptions[variationName] === input.value) {
                    input.disabled = false; // Cho phép chọn
                } else if (availableOptions.has(input.value)) {
                    input.disabled = false; // Cho phép chọn
                }
            });
        });
    }




    function viewProductList() {
        window.location.href = `/Product/ProductList/ProductList`;
    }

</script>


