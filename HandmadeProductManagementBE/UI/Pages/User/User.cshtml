@page
@using HandmadeProductManagement.Core.Common
@model UI.Pages.User.UserModel
@{
    ViewData["Title"] = "Manage User";
    var apiBaseUrl = Constants.ApiBaseUrl;
}
@using UI.Pages.Shared
@{
    var errorModel = new ErrorMessageModel
            {
                ErrorMessage = Model.ErrorMessage,
                ErrorDetail = Model.ErrorDetail
            };
    var token = HttpContext.Session.GetString("Token");
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <partial name="_ErrorMessage" model="errorModel" />
}
<h1 class="mb-4 text-center text-4xl font-bold text-red-600">Manage Users</h1>

<form method="get" class="mb-8 flex space-x-4">
    <input type="text" name="searchName" placeholder="Search by Name" class="rounded-lg border border-gray-300 p-2" value="@Model.SearchName" />
    <input type="text" name="searchPhone" placeholder="Search by Phone Number" class="rounded-lg border border-gray-300 p-2" value="@Model.SearchPhone" />
    <button type="submit" class="rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600">Search</button>
</form>

<div class="space-y-4">
    @foreach (var user in Model.users )
    {
        <div class="rounded-lg border border-gray-300 bg-white p-4 shadow-md">
            <div class="flex flex-col">
                <span class="font-semibold">@user.UserName</span>
                <span class="text-gray-500">@user.Email</span>
                <span class="text-gray-500">@user.PhoneNumber</span>
                <span class="@(user.Status == "Active" ? "text-green-600" : "text-red-600")">
                    @(user.Status == "Active" ? "Active" : "Inactive")
                </span>
            </div>
            
            <div class="mt-4 flex justify-end space-x-2">
                <a class="text-blue-600 hover:text-blue-800" asp-page="Details" asp-route-userId="@user.Id">Details</a> |
                <a class="text-blue-600 hover:text-blue-800" asp-page="Edit" asp-route-userId="@user.Id">Edit</a> |
                <a class="cursor-pointer text-red-600 hover:text-red-800" onclick="deleteUser('@user.Id')">Delete</a> |
                <a class="cursor-pointer text-blue-600 hover:text-blue-800" onclick="restoreUser('@user.Id')">Restore</a>
            </div>
        </div>
    }
</div>



<div class="mt-8">
@{
    var paginationModel = new UI.Pages.Shared.PaginationModel
            {
                PageNumber = Model.PageNumber,
                PageSize = Model.PageSize,
                HasNextPage = Model.HasNextPage
            };
}

<partial name="~/Pages/Shared/_Pagination.cshtml" model="paginationModel" />
<div class="mt-8">


        <script>
            const apiBaseUrl = '@apiBaseUrl';

            async function deleteUser(userId) {
                console.log("Deleting user with ID:", userId);

                const confirmed = confirm("Are you sure you want to delete this user?");
                if (confirmed) {
                    const response = await fetch(`${apiBaseUrl}/api/users/${userId}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error deleting user.');
                    }
                }
            }

            async function restoreUser(userId) {
                console.log("Restoring user with ID:", userId);

                const confirmed = confirm("Are you sure you want to restore this user?");
                if (confirmed) {
                    const response = await fetch(`${apiBaseUrl}/api/users/${userId}/restore`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error restoring user.');
                    }
                }
            }
        </script>
