@page
@model UI.Pages.Cart.CartViewModel
@{
    ViewData["Title"] = "Cart";
}
<div class="mb-20 h-screen bg-gray-100">
    <div class="container mx-auto px-4">
        <h1 class="mb-4 text-4xl font-semibold">Your Cart</h1>
        @if (Model.CartItems != null && Model.CartItems.Any())
        {
            <div class="flex flex-col gap-4 md:flex-row">
                <div class="md:w-3/4">
                    @foreach (var group in Model.CartItems)
                    {
                        <div class="mb-4 rounded-lg bg-white p-6 shadow-md">
                            <a href="/Shop/Index?id=@group.ShopId" class="text-lg font-semibold">@group.ShopName</a>
                            <table class="w-full" data-shop-id="@group.ShopId">
                                <thead>
                                    <tr>
                                        <th class="text-left font-normal">Product</th>
                                        <th class="text-left font-normal">Price</th>
                                        <th class="text-left font-normal">Discount Price</th>
                                        <th class="text-left font-normal">Variation Options</th>
                                        <th class="text-left font-normal">In Stock</th>
                                        <th class="text-left font-normal">Quantity</th>
                                        <th class="text-left font-normal">Total</th>
                                        <th class="text-left font-normal">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in group.CartItems)
                                    {
                                        <tr id="cart-item-@item.Id" data-shop-id="@group.ShopId" data-price="@item.UnitPrice" data-discount-price="@item.DiscountPrice">
                                            <td>
                                                <div class="flex items-center">
                                                    <img class="h-20 w-20" src="@item.ImageUrl" alt="@item.ProductName" />
                                                    <a href="/ProductDetail/ProductDetail?id=@item.ProductId" class="ml-4 block font-semibold">@item.ProductName</a>
                                                </div>
                                            </td>
                                            <td>₫<s>@item.UnitPrice.ToString("N0").Replace(",", ".")</s></td>
                                            <td class="text-red-500">₫@Math.Round(item.DiscountPrice, 0, MidpointRounding.AwayFromZero).ToString("N0").Replace(",", ".")</td>
                                            <td>
                                                <input type="number" id="quantity-@item.Id" min="1" max="@item.StockQuantity" value="@item.ProductQuantity"
                                                       class="w-16 text-center @(item.InStock ? "" : "border-red-500")"
                                                       onchange="updateQuantity('@item.Id', this.value)" />
                                            </td>
                                            <td class="text-gray-500">
                                                @item.StockQuantity
                                            </td>
                                            <td>
                                                <input type="number" id="quantity-@item.Id" min="1" max="@item.StockQuantity" value="@item.ProductQuantity"
                                                       class="w-16 text-center @(item.InStock ? "" : "border-red-500")"
                                                       onchange="updateQuantity('@item.Id', this.value)" />
                                                @if (!item.InStock)
                                                {
                                                    <span id="exceed-warning-@item.Id" class="text-sm text-red-500">*Exceeds stock limit</span>
                                                }
                                            </td>
                                            <td class="total-price" id="total-price-@item.Id">
                                                ₫@Math.Round(item.DiscountPrice * item.ProductQuantity, 0, MidpointRounding.AwayFromZero).ToString("N0").Replace(",", ".")
                                            </td>
                                            <td>
                                                <button class="text-white font-bold py-2 px-4 rounded" style="background-color: red" onclick="removeCartItem('@item.Id')">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="4" style="text-align: right;"><strong>Subtotal</strong></td>
                                        <td colspan="2" id="subtotal-@group.ShopId">
                                            ₫@Math.Round(group.CartItems.Sum(item => item.DiscountPrice * item.ProductQuantity), 0, MidpointRounding.AwayFromZero).ToString("N0").Replace(",", ".")
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }

                    <div class="rounded-lg bg-white p-6 text-right shadow-md">
                        <h2 class="text-lg font-semibold">Total</h2>
                        <p class="text-lg" id="total-amount">
                            ₫@Math.Round(Model.Total, 0, MidpointRounding.AwayFromZero).ToString("N0").Replace(",", ".")
                        </p>
                        <button id="checkoutButton"
                                class="mt-4 w-full rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed disabled:opacity-50"
                                onclick="checkout()"
                        @(Model.CartItems.Any(group => group.CartItems.Any(item => !item.InStock)) ? "disabled" : "")>
                            Checkout
                        </button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Your cart is empty.</p>
        }
        @if (!Model.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in Model.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
</div>
<script>
    async function updateQuantity(cartItemId, newQuantity) {
        const cartItem = document.querySelector(`#cart-item-${cartItemId}`);
        const exceedWarning = document.querySelector(`#exceed-warning-${cartItemId}`);
        const quantityInput = cartItem.querySelector(`#quantity-${cartItemId}`);
        const currentQuantity = parseInt(quantityInput.value); // Save current value
        console.log(1)
        // Get stock quantity
        const stockQuantity = parseInt(quantityInput.getAttribute('max'));

        // Check if new quantity is valid
        if (newQuantity < 1) {
            alert("Quantity must be at least 1.");
            return;
        }

        const isInStock = newQuantity <= stockQuantity; // Check if new quantity is within stock

        console.log("Stock: ", stockQuantity);
        console.log("isInStock: ", isInStock);

        // Reset previous warnings and red borders
        if (exceedWarning) {
            exceedWarning.style.display = 'none';
        }
        quantityInput.classList.remove("border-red-500"); 

        // If quantity exceeds stock, show warning and don't call API
        if (!isInStock) {
            if (exceedWarning) {
                exceedWarning.style.display = 'block';  // Show exceed warning
            }
            quantityInput.classList.add("border-red-500"); 
            alert("Cannot exceed quantity in stock.");
            quantityInput.value = currentQuantity;  // Restore previous value
            location.reload();
            OnGetAsync();
            return;
        }

        // Proceed to update the quantity through API if valid
        updateCheckoutButtonState();  // Update the checkout button status

        const response = await fetch(`?handler=UpdateQuantity&cartItemId=${cartItemId}&newQuantity=${newQuantity}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ productQuantity: newQuantity })
        });

        if (response.ok) {
            // Update total price for the product
            const price = parseFloat(cartItem.dataset.price);
            const discountPrice = parseFloat(cartItem.dataset.discountPrice) || 0;
            const totalPriceElement = cartItem.querySelector('.total-price');
            const total = discountPrice * newQuantity;
            totalPriceElement.innerText = `₫${total.toFixed(0)}`;

            // Update subtotal
            const shopId = cartItem.dataset.shopId;
            const subtotalElement = document.querySelector(`#subtotal-${shopId}`);
            const groupSubtotal = Array.from(document.querySelectorAll(`table[data-shop-id="${shopId}"] .total-price`))
                .reduce((sum, el) => sum + parseFloat(el.innerText.replace('₫', '').replace(/,/g, '')), 0);
            subtotalElement.innerText = `₫${groupSubtotal.toFixed(0)}`;

            // Update total cart amount
            const totalAmountElement = document.querySelector("#total-amount");
            const overallTotal = Array.from(document.querySelectorAll(`.total-price`))
                .reduce((sum, el) => sum + parseFloat(el.innerText.replace('₫', '').replace(/,/g, '')), 0);
            totalAmountElement.innerText = `₫${overallTotal.toFixed(0)}`;
        } else {
            // Restore the quantity if there's an error
            quantityInput.value = currentQuantity;  // Restore previous value
            alert("An error occurred while updating the quantity.");
            quantityInput.value = currentQuantity;  // Restore previous value
            location.reload();
        }
    }

    function updateCheckoutButtonState() {
        const checkoutButton = document.querySelector("#checkoutButton");
        const cartItems = document.querySelectorAll('.cart-item');

        const anyItemOutOfStock = Array.from(cartItems).some(item => {
            const quantity = parseInt(item.querySelector(`#quantity-${item.dataset.id}`).value);
            const maxStock = parseInt(item.querySelector(`#quantity-${item.dataset.id}`).getAttribute('max'));
            return quantity > maxStock;
        });

        checkoutButton.disabled = anyItemOutOfStock;
    }

    async function removeCartItem(cartItemId) {
        const response = await fetch(`?handler=Delete&cartItemId=${cartItemId}`, {
            method: "POST",
            headers: {
                "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        });
        if (response.ok) {
            location.reload();
        } else {
            alert("An error occurred while trying to delete the item.");
        }
    }
    async function checkout() {
        const cartItems = @Html.Raw(Json.Serialize(Model.CartItems)); // Chuyển đổi CartItems thành JSON
        // Lưu trữ thông tin vào localStorage
        localStorage.setItem('cartItems', JSON.stringify(cartItems));
        // Chuyển hướng đến trang checkout
        window.location.href = '/Checkout'; // Đảm bảo đường dẫn đúng với trang checkout của bạn
    }
</script>
