@page
@model UserInfoModel
@using UI.Pages.Shared
@{
    ViewData["Title"] = "User Info";
}
@{
    var errorModel = new ErrorMessageModel
            {
                ErrorMessage = Model.ErrorMessage,
                ErrorDetail = Model.ErrorDetail
            };
    var token = HttpContext.Session.GetString("Token");
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <partial name="_ErrorMessage" model="errorModel" />
}
@using HandmadeProductManagement.Core.Common
<script>
    const apiBaseUrl = '@Constants.ApiBaseUrl';
    var tokenFromRazor = '@token';

    // Kiểm tra nếu token tồn tại và lưu vào localStorage
    if (tokenFromRazor) {
        localStorage.setItem('authToken', tokenFromRazor);
    } else {
        console.log("Token không tồn tại.");
    }
    const authToken = localStorage.getItem('authToken');
    const requestVerificationToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
</script>

<div class="container mx-auto mt-10">
    <h2 class="text-center text-lg font-bold text-blue-600">User Information</h2>

    <div class="mt-8 flex justify-between">
        <!-- User Info Section -->
        <div class="w-full px-4 md:w-1/2">
            <div class="rounded-lg border bg-white p-4 shadow-lg">
                <!-- Avatar at the top with click to upload functionality -->
                <div class="relative mb-4 text-center">
                    @if (!string.IsNullOrEmpty(Model.UserInfo.AvatarUrl))
                    {
                        <img id="userAvatar" src="@Model.UserInfo.AvatarUrl" alt="User Avatar" class="mx-auto h-32 w-32 cursor-pointer rounded-full object-cover" onclick="document.getElementById('avatarUpload').click();" />
                    }
                    else
                    {
                        <p class="text-gray-600">No avatar available.</p>
                    }
                    <!-- Button to change/upload avatar, with dynamic text based on avatar existence -->
                    <div class="mt-2">
                        <button onclick="document.getElementById('avatarUpload').click();" class="rounded-lg bg-blue-500 px-4 py-2 text-white hover:bg-blue-600">
                            @if (!string.IsNullOrEmpty(Model.UserInfo.AvatarUrl))
                            {
                                <text>Change Avatar</text>
                            }
                            else
                            {
                                <text>Upload Avatar</text>
                            }
                        </button>
                    </div>
                    <input type="file" id="avatarUpload" class="hidden" accept="image/*" onchange="uploadAvatar(event)" />
                </div>

                <!-- User Info -->
                <div class="mb-4">
                    <label class="mb-2 block text-sm font-bold text-gray-700">Name:</label>
                    <p class="text-gray-600">@Model.user.UserName</p>
                </div>
                <div class="mb-4">
                    <label class="mb-2 block text-sm font-bold text-gray-700">Email:</label>
                    <p class="text-gray-600">@Model.user.Email</p>
                </div>
                <div class="mb-4">
                    <label class="mb-2 block text-sm font-bold text-gray-700">Phone Number:</label>
                    <p class="text-gray-600">@Model.user.PhoneNumber</p>
                </div>
                <div class="mb-4">
                    <label class="mb-2 block text-sm font-bold text-gray-700">Two factor enabled:</label>
                    <p class="text-gray-600">@Model.user.TwoFactorEnabled</p>
                </div>

                <div class="mt-6 text-center">
                    <form method="get" asp-page="/UserInfo/EditUser">
                        <button type="submit" class="rounded-lg bg-cyan-600 px-4 py-2 font-semibold text-white transition duration-300 hover:bg-cyan-700">
                            Edit Profile
                        </button>
                    </form>
                    <a href="/ChangePassword" class="mt-4 inline-block rounded-lg bg-blue-600 px-4 py-2 font-semibold text-white transition duration-300 hover:bg-blue-700">
                        Change Password
                    </a>
                </div>
            </div>
        </div>

        <!-- User Info Detailed Section -->
        <div class="w-full px-4 md:w-1/2">
            <div class="rounded-lg border bg-white p-4 shadow-lg">
                <div id="userInfoDetailedSection">
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Full Name:</label>
                        <p class="text-gray-600" id="userFullName">@Model.UserInfo.FullName</p>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Display Name:</label>
                        <p class="text-gray-600" id="userDisplayName">@Model.UserInfo.DisplayName</p>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bio:</label>
                        <p class="text-gray-600" id="userBio">@Model.UserInfo.Bio</p>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bank Account:</label>
                        <p class="text-gray-600" id="userBankAccount">@Model.UserInfo.BankAccount</p>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bank Account Name:</label>
                        <p class="text-gray-600" id="userBankAccountName">@Model.UserInfo.BankAccountName</p>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bank:</label>
                        <p class="text-gray-600" id="userBank">@Model.UserInfo.Bank</p>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Address:</label>
                        <p class="text-gray-600" id="userAddress">@Model.UserInfo.Address</p>
                    </div>
                </div>

                <!-- Edit Button -->
                <div id="editButtonsDetailed" class="mt-4 text-center">
                    <button id="editButtonDetailed" class="rounded-lg bg-yellow-500 px-4 py-2 text-white hover:bg-yellow-600" onclick="editUserInfoDetailed()">
                        Edit Profile
                    </button>
                </div>

                <!-- Editable User Info Fields (Detailed) -->
                <div id="editUserInfoDetailedSection" class="hidden">
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Full Name:</label>
                        <input type="text" id="editUserFullName" class="w-full rounded-md border px-3 py-2" value="@Model.UserInfo.FullName" />
                        <span id="fullNameError" class="hidden text-sm text-red-500">Full name can only contain letters (including accents) and spaces. Max 255 characters.</span>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Display Name:</label>
                        <input type="text" id="editUserDisplayName" class="w-full rounded-md border px-3 py-2" value="@Model.UserInfo.DisplayName" />
                        <span id="displayNameError" class="hidden text-sm text-red-500">Display name can only contain letters. Max 100 characters.</span>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bio:</label>
                        <textarea id="editUserBio" class="w-full rounded-md border px-3 py-2">@Model.UserInfo.Bio</textarea>
                        <span id="bioError" class="hidden text-sm text-red-500">Bio cannot be longer than 500 characters.</span>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bank Account:</label>
                        <input type="text" id="editUserBankAccount" class="w-full rounded-md border px-3 py-2" value="@Model.UserInfo.BankAccount" />
                        <span id="bankAccountError" class="hidden text-sm text-red-500">Bank account should contain only digits.</span>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bank Account Name:</label>
                        <input type="text" id="editUserBankAccountName" class="w-full rounded-md border px-3 py-2" value="@Model.UserInfo.BankAccountName" />
                        <span id="bankAccountNameError" class="hidden text-sm text-red-500">Bank account name can only contain letters and spaces. Max 255 characters.</span>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Bank:</label>
                        <input type="text" id="editUserBank" class="w-full rounded-md border px-3 py-2" value="@Model.UserInfo.Bank" />
                        <span id="bankError" class="hidden text-sm text-red-500">Bank name can only contain letters and spaces. Max 255 characters.</span>
                    </div>
                    <div class="mb-4">
                        <label class="mb-2 block text-sm font-bold text-gray-700">Address:</label>
                        <input type="text" id="editUserAddress" class="w-full rounded-md border px-3 py-2" value="@Model.UserInfo.Address" />
                        <span id="addressError" class="hidden text-sm text-red-500">Address can only contain letters, numbers, spaces, commas, and periods. Max 500 characters.</span>
                    </div>
                </div>

                <!-- Save/Cancel buttons for Detailed Info (hidden by default) -->
                <div id="saveCancelButtonsDetailed" class="mt-4 hidden text-center">
                    <button id="saveButtonDetailed" class="rounded-lg bg-green-500 px-4 py-2 text-white hover:bg-green-600" onclick="saveUserInfoDetailed()">Save</button>
                    <button id="cancelButtonDetailed" class="rounded-lg bg-red-500 px-4 py-2 text-white hover:bg-red-600" onclick="cancelEditDetailed()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        async function uploadAvatar(event) {
            const file = event.target.files[0];
            if (file) {
                const formData = new FormData();
                formData.append("file", file);

                try {
                    const response = await fetch(`${apiBaseUrl}/api/userinfo/Upload`, {
                        method: "POST",
                        headers: {
                            'Authorization': `Bearer ${authToken}`,
                            'RequestVerificationToken': requestVerificationToken
                        },
                        body: formData
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.statusCode === 200) {
                            location.reload();
                        } else {
                            alert("Error uploading avatar.");
                        }
                    } else {
                        alert(`Error uploading avatar: ${response.statusText}`);
                    }
                } catch (error) {
                    console.error("Error uploading avatar:", error);
                    alert("An error occurred while uploading the avatar.");
                }
            }
        }
    </script>

    <script>
        function editUserInfoDetailed() {
            // Show the editable fields and hide the read-only fields
            document.getElementById('userInfoDetailedSection').classList.add('hidden');
            document.getElementById('editUserInfoDetailedSection').classList.remove('hidden');
            document.getElementById('editButtonsDetailed').classList.add('hidden');
            document.getElementById('saveCancelButtonsDetailed').classList.remove('hidden');
        }

        async function saveUserInfoDetailed() {
            // Get the values from the input fields
            const userFullName = document.getElementById('editUserFullName').value;
            const userDisplayName = document.getElementById('editUserDisplayName').value;
            const userBio = document.getElementById('editUserBio').value;
            const userBankAccount = document.getElementById('editUserBankAccount').value;
            const userBankAccountName = document.getElementById('editUserBankAccountName').value;
            const userBank = document.getElementById('editUserBank').value;
            const userAddress = document.getElementById('editUserAddress').value;

            let isValid = true;

            // Validate Full Name (Max 255 characters, only letters and spaces)
            const fullNameRegex = /^[A-Za-zÀ-ỹ\s]+$/;;  // Unicode property for letters and spaces
            if (!fullNameRegex.test(userFullName) || userFullName.length > 255) {
                document.getElementById('fullNameError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('fullNameError').classList.add('hidden');
            }

            // Validate Display Name (Max 100 characters, only letters)
            const displayNameRegex = /^[A-Za-zÀ-ỹ\s]+$/;;  // Only English letters
            if (!displayNameRegex.test(userDisplayName) || userDisplayName.length > 100) {
                document.getElementById('displayNameError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('displayNameError').classList.add('hidden');
            }

            // Validate Bio (Max 500 characters)
            if (userBio.length > 500) {
                document.getElementById('bioError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('bioError').classList.add('hidden');
            }

            // Validate Bank Account (Only digits)
            const bankAccountRegex = /^\d+$/;  // Only digits
            if (!bankAccountRegex.test(userBankAccount)) {
                document.getElementById('bankAccountError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('bankAccountError').classList.add('hidden');
            }

            // Validate Bank Account Name (Max 255 characters, only letters and spaces)
            const bankAccountNameRegex = /^[a-zA-Z\s]+$/;  // Only English letters and spaces
            if (!bankAccountNameRegex.test(userBankAccountName) || userBankAccountName.length > 255) {
                document.getElementById('bankAccountNameError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('bankAccountNameError').classList.add('hidden');
            }

            // Validate Bank (Max 255 characters, only letters and spaces)
            const bankRegex = /^[a-zA-Z\s]+$/;  // Only English letters and spaces
            if (!bankRegex.test(userBank) || userBank.length > 255) {
                document.getElementById('bankError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('bankError').classList.add('hidden');
            }

            // Validate Address (Max 500 characters, only letters, numbers, spaces, commas, and periods)
            const addressRegex = /^[A-Za-z0-9À-ỹ\s,\.]+$/;
            if (!addressRegex.test(userAddress) || userAddress.length > 500) {
                document.getElementById('addressError').classList.remove('hidden');
                isValid = false;
            } else {
                document.getElementById('addressError').classList.add('hidden');
            }

            // Proceed only if all validations pass
            if (isValid) {
                const updatedData = {
                    FullName: userFullName,
                    DisplayName: userDisplayName,
                    Bio: userBio,
                    BankAccount: userBankAccount,
                    BankAccountName: userBankAccountName,
                    Bank: userBank,
                    Address: userAddress
                };

                try {
                    const response = await fetch(`${apiBaseUrl}/api/userinfo/`, {
                        method: "PATCH",
                        headers: {
                            'Authorization': `Bearer ${authToken}`,
                            'RequestVerificationToken': requestVerificationToken,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updatedData)
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.statusCode === 200) {
                            location.reload();
                        } else {
                            alert("Error updating user information.");
                        }
                    } else {
                        alert(`Error: ${response.statusText}`);
                    }
                } catch (error) {
                    console.error("Error updating user info:", error);
                    alert("An error occurred while updating the user information.");
                }
            }
        }

        function cancelEditDetailed() {
            // Hide the editable fields and show the read-only fields
            document.getElementById('userInfoDetailedSection').classList.remove('hidden');
            document.getElementById('editUserInfoDetailedSection').classList.add('hidden');
            document.getElementById('editButtonsDetailed').classList.remove('hidden');
            document.getElementById('saveCancelButtonsDetailed').classList.add('hidden');
        }
    </script>
}
