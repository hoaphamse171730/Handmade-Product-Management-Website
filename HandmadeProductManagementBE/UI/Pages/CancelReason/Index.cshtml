@page
@model UI.Pages.CancelReason.IndexModel
@using UI.Pages.Shared
@{
    ViewData["Title"] = "CancelReason";
}
@{
    var errorModel = new ErrorMessageModel
            {
                ErrorMessage = Model.ErrorMessage,
                ErrorDetail = Model.ErrorDetail
            };
    var token = HttpContext.Session.GetString("Token");
}
@using HandmadeProductManagement.Core.Common
<script>
    const apiBaseUrl = '@Constants.ApiBaseUrl';
    var tokenFromRazor = '@token';

    // Kiểm tra nếu token tồn tại và lưu vào localStorage
    if (tokenFromRazor) {
        localStorage.setItem('authToken', tokenFromRazor);
    } else {
        console.log("Token không tồn tại.");
    }
    const authToken = localStorage.getItem('authToken');
    const requestVerificationToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
</script>
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <partial name="_ErrorMessage" model="errorModel" />
}

<h1 class="mb-6 text-center text-3xl font-bold">Cancel Reason</h1>

<!-- Button to open the modal -->
<button onclick="openModal()" class="mb-6 inline-block rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700">Create New Cancel Reason</button>

<a href="/CancelReason/Deleted" class="mb-6 inline-block rounded bg-red-500 px-4 py-2 font-bold text-white hover:bg-red-700">Deleted Cancel Reasons</a>

<!-- Create Modal -->
<div id="createModal" class="fixed inset-0 z-50 flex hidden items-center justify-center bg-gray-900 bg-opacity-50">
    <div class="w-full max-w-md rounded-lg bg-white p-6">
        <h2 class="mb-4 text-xl font-semibold">Create New Cancel Reason</h2>

        <div class="mb-4">
            <label class="block text-gray-700">Description</label>
            <!-- Description input -->
            <textarea id="cancelReasonDescription" class="w-full rounded border px-3 py-2" required pattern="^[A-Za-zÀ-ỹáàảãạắằẳẵặéèẻẽẹíìỉĩịóòỏõọốồổỗộúùủũụưáàảãạắằẳẵặýỳỷỹỵđĐ\s]+$"></textarea>
        </div>

        <div class="mb-4">
            <label class="block text-gray-700">Refund Rate</label>
            <!-- Refund Rate input -->
            <input type="number" id="cancelReasonRefundRate" class="w-full rounded border px-3 py-2" min="0" max="1" step="0.01" required>
        </div>

        <div class="flex justify-end">
            <button onclick="closeModal()" class="mr-2 rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</button>
            <button onclick="submitCancelReason()" class="rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-700">Save</button>
        </div>

        <p id="responseMessage" class="mt-4 hidden text-sm text-red-500"></p>
    </div>
</div>

<!-- Edit Modal -->
<div id="editModal" class="fixed inset-0 z-50 flex hidden items-center justify-center bg-gray-900 bg-opacity-50">
    <div class="w-full max-w-md rounded-lg bg-white p-6">
        <h2 class="mb-4 text-xl font-semibold">Edit Cancel Reason</h2>

        <div class="mb-4">
            <label class="block text-gray-700">Description</label>
            <textarea id="editCancelReasonDescription" class="w-full rounded border px-3 py-2"></textarea>
        </div>

        <div class="mb-4">
            <label class="block text-gray-700">Refund Rate</label>
            <input type="number" id="editCancelReasonRefundRate" class="w-full rounded border px-3 py-2" min="0" max="100">
        </div>

        <div class="flex justify-end">
            <button onclick="closeEditModal()" class="mr-2 rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</button>
            <button onclick="submitEditCancelReason()" class="rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-700">Save</button>
        </div>

        <p id="editResponseMessage" class="mt-4 hidden text-sm text-red-500"></p>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmationModal" class="fixed inset-0 z-50 flex hidden items-center justify-center bg-gray-900 bg-opacity-50">
    <div class="w-full max-w-md rounded-lg bg-white p-6">
        <h2 class="mb-4 text-xl font-semibold">Confirm Deletion</h2>
        <!-- Response message element -->
        <p id="deleteResponseMessage" class="hidden text-sm text-red-500"></p>
        <p>Are you sure you want to delete this cancel reason?</p>
        <div class="flex justify-end">
            <button onclick="closeDeleteConfirmationModal()" class="mr-2 rounded bg-gray-500 px-4 py-2 text-white hover:bg-gray-600">Cancel</button>
            <button onclick="confirmDeleteCancelReason()" class="rounded bg-red-500 px-4 py-2 text-white hover:bg-red-700">Delete</button>
        </div>
    </div>
</div>

<div class="overflow-x-auto">
    <table class="min-w-full rounded-lg bg-white shadow-md">
        <thead>
            <tr class="bg-gray-200 text-sm uppercase leading-normal text-gray-600">
                <th class="px-6 py-3 text-left">#</th>
                <th class="px-6 py-3 text-left">Description</th>
                <th class="px-6 py-3 text-left">Refund Rate</th>
                <th class="px-6 py-3 text-left">Actions</th>
            </tr>
        </thead>
        <tbody class="text-sm font-light text-gray-600">
            @for (int i = 0; i < Model.CancelReasons.Count; i++)
            {
                var cancelReason = Model.CancelReasons[i];
                <tr class="border-b border-gray-200 hover:bg-gray-100">
                    <td class="px-6 py-3 text-left">@((i + 1))</td>
                    <td class="px-6 py-3 text-left">@cancelReason.Description</td>
                    <td class="px-6 py-3 text-left">@cancelReason.RefundRate</td>
                    <td class="px-6 py-3 text-left">
                        <a onclick="openEditModal('@cancelReason.Id', '@cancelReason.Description', '@cancelReason.RefundRate')" class="rounded bg-blue-500 px-3 py-1 text-xs font-bold text-white hover:bg-blue-800">Edit</a>
                        <a onclick="openDeleteConfirmationModal('@cancelReason.Id')" class="ml-2 rounded bg-red-500 px-3 py-1 text-xs font-bold text-white hover:bg-red-800">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    // Handle Create Modal
    async function submitCancelReason() {
        const cancelReasonDescription = document.getElementById('cancelReasonDescription').value;
        const cancelReasonRefundRate = document.getElementById('cancelReasonRefundRate').value;

        // Validate Description (Only letters and spaces allowed)
        const descriptionPattern = /^[A-Za-zÀ-ỹáàảãạắằẳẵặéèẻẽẹíìỉĩịóòỏõọốồổỗộúùủũụưáàảãạắằẳẵặýỳỷỹỵđĐ\s]+$/;
        if (!descriptionPattern.test(cancelReasonDescription)) {
            showError('Description can only contain letters and spaces.', 'responseMessage');
            return;
        }

        // Validate Refund Rate (Must be between 0 and 1)
        if (cancelReasonRefundRate < 0 || cancelReasonRefundRate > 1) {
            showError('Refund rate must be between 0 and 1.', 'responseMessage');
            return;
        }

        const cancelReasonData = {
            description: cancelReasonDescription,
            refundRate: cancelReasonRefundRate
        };

        try {
            const response = await fetch('@Url.Page("Index", "CreateCancelReason")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cancelReasonData)
            });

            const result = await response.json();

            const messageElement = document.getElementById('responseMessage');
            messageElement.classList.remove('hidden');

            if (result.success) {
                messageElement.classList.replace('text-red-500', 'text-green-500');
                messageElement.textContent = result.message;
                closeModal();
                location.reload();
            } else {
                messageElement.textContent = result.message;
            }
        } catch (error) {
            showError('An error occurred while creating the cancel reason.', 'responseMessage');
        }
    }

    function openModal() {
        document.getElementById('createModal').classList.remove('hidden');
    }

    function closeModal() {
        document.getElementById('createModal').classList.add('hidden');
        resetForm('cancelReasonDescription', 'cancelReasonRefundRate', 'responseMessage');
    }

    function openEditModal(cancelReasonId, cancelReasonDescription, cancelReasonRefundRate) {
        // Ensure the values are set correctly in the modal
        document.getElementById('editCancelReasonDescription').value = cancelReasonDescription;
        document.getElementById('editCancelReasonRefundRate').value = parseFloat(cancelReasonRefundRate); // Ensure it's a number
        document.getElementById('editModal').dataset.cancelReasonId = cancelReasonId;
        document.getElementById('editModal').classList.remove('hidden');
    }


    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
        resetForm('editCancelReasonDescription', 'editCancelReasonRefundRate', 'editResponseMessage');
    }

    async function submitEditCancelReason() {
        const cancelReasonId = document.getElementById('editModal').dataset.cancelReasonId;
        const cancelReasonDescription = document.getElementById('editCancelReasonDescription').value;
        const cancelReasonRefundRate = document.getElementById('editCancelReasonRefundRate').value;

        // Validate Description (Only letters and spaces allowed)
        const descriptionPattern = /^[A-Za-zÀ-ỹáàảãạắằẳẵặéèẻẽẹíìỉĩịóòỏõọốồổỗộúùủũụưáàảãạắằẳẵặýỳỷỹỵđĐ\s]+$/;
        if (!descriptionPattern.test(cancelReasonDescription)) {
            showError('Description can only contain letters and spaces.', 'editResponseMessage');
            return;
        }

        // Validate Refund Rate (Must be between 0 and 1)
        if (cancelReasonRefundRate < 0 || cancelReasonRefundRate > 1) {
            showError('Refund rate must be between 0 and 1.', 'editResponseMessage');
            return;
        }

        const cancelReasonData = {
            description: cancelReasonDescription,
            refundRate: cancelReasonRefundRate
        };

        try {
            const response = await fetch(`${apiBaseUrl}/api/cancelreason/${cancelReasonId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`,
                    'RequestVerificationToken': requestVerificationToken
                },
                body: JSON.stringify(cancelReasonData)
            });

            const result = await response.json();
            const messageElement = document.getElementById('editResponseMessage');
            messageElement.classList.remove('hidden');

            if (response.ok) { // Check if the response status is OK
                if (result.data) {
                    messageElement.classList.replace('text-red-500', 'text-green-500');
                    messageElement.textContent = result.message || "Cancel reason updated successfully.";

                    // Close the modal
                    closeEditModal();

                    // Reload the page after successful update
                    location.reload();
                } else {
                    // If no data, show the message (e.g., error)
                    messageElement.classList.replace('text-green-500', 'text-red-500');
                    messageElement.textContent = result.message || "An unexpected error occurred.";
                }
            } else {
                // Handle error from server response if not OK
                messageElement.classList.replace('text-green-500', 'text-red-500');
                messageElement.textContent = result.message || "An error occurred while editing the cancel reason.";
            }
        } catch (error) {
            // Log error and show error message in case of any failure
            console.error("Error occurred while editing cancel reason:", error);
            showError('An error occurred while editing the cancel reason.', 'editResponseMessage');
        }
    }


    // Handle Delete Modal
    function openDeleteConfirmationModal(cancelReasonId) {
        document.getElementById('deleteConfirmationModal').dataset.cancelReasonId = cancelReasonId;
        document.getElementById('deleteConfirmationModal').classList.remove('hidden');
    }

    function closeDeleteConfirmationModal() {
        document.getElementById('deleteConfirmationModal').classList.add('hidden');
    }

    async function confirmDeleteCancelReason() {
        const cancelReasonId = document.getElementById('deleteConfirmationModal').dataset.cancelReasonId;
        try {
            const response = await fetch(`${apiBaseUrl}/api/cancelreason/${cancelReasonId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`,
                    'RequestVerificationToken': requestVerificationToken
                }
            });

            const result = await response.json();
            const messageElement = document.getElementById('deleteResponseMessage');
            messageElement.classList.remove('hidden');
            if (result.data) {  // Check if `result.data` is true
                messageElement.classList.replace('text-red-500', 'text-green-500');
                messageElement.textContent = result.message;


                // Close modal after successful deletion
                closeDeleteConfirmationModal();

                // Log to confirm deletion was successful and reload is triggered
                console.log("Delete successful, reloading page...");
                // Reload the page after successful delete
                location.reload();
            } else {
                messageElement.textContent = result.message;
            }
        } catch (error) {
            // Log error if there's a failure in the delete request
            console.error("Error occurred while deleting:", error);
            showError('An error occurred while deleting the cancel reason.', 'deleteResponseMessage');
        }
    }


    // Helper Functions
    function resetForm(descriptionId, refundRateId, responseMessageId) {
        document.getElementById(descriptionId).value = '';
        document.getElementById(refundRateId).value = '';
        const messageElement = document.getElementById(responseMessageId);
        messageElement.classList.add('hidden');
    }

    function showError(message, elementId) {
        const messageElement = document.getElementById(elementId);
        if (messageElement) {  // Kiểm tra phần tử có tồn tại
            messageElement.classList.remove('hidden');
            messageElement.classList.replace('text-green-500', 'text-red-500');
            messageElement.textContent = message;
        } else {
            console.error(`Element with ID ${elementId} not found!`);
        }
    }
</script>
