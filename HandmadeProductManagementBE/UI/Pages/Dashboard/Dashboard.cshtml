@page
@model UI.Pages.Dashboard.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}
@using UI.Pages.Shared
@{
    var errorModel = new ErrorMessageModel
            {
                ErrorMessage = Model.ErrorMessage,
                ErrorDetail = Model.ErrorDetail
            };
    var token = HttpContext.Session.GetString("Token");
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <partial name="_ErrorMessage" model="errorModel" />
}

@functions {
    public List<string> GenerateBackgroundColors(int count)
    {
        var colors = new List<string>();
        var baseColors = new List<string> { "#ff6384", "#36a2eb", "#cc65fe", "#ffce56", "#4bc0c0", "#9966ff", "#ff9f40" };
        for(int i = 0; i < count; i++)
        {
            colors.Add(baseColors[i % baseColors.Count]);
        }
        return colors;
    }
}
@{
    // Generate enough colors based on the number of labels
    var backgroundColors = GenerateBackgroundColors(Model.TypeDistributionLabels.Count);
}

<div class="dashboard container mx-auto p-6">
    <h1 class="mb-8 text-3xl font-bold text-gray-800">Dashboard</h1>

    <div class="grid-cols-1 grid gap-6 md:grid-cols-2">
        <div class="dashboard-section rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-4 text-xl font-semibold text-gray-700">Total Sale</h2>
            <p class="text-lg text-gray-600">Total Sales: <span class="font-bold text-blue-500">@Model.TotalSales.ToString("N0").Replace(",", ".")₫</span></p>
        </div>

        <div class="dashboard-section rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-4 text-xl font-semibold text-gray-700">Sales Trend Over Time</h2>
            <div class="relative h-64">
                <canvas id="salesTrendChart" class="h-full w-full"></canvas>
            </div>
        </div>

        <div class="dashboard-section rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-4 text-xl font-semibold text-gray-700">Top 10 Most-Sale Shops</h2>
            <ul class="ml-6 list-disc text-gray-600">
                @foreach (var shop in Model.TopShops)
                {
                    <li class="py-1">
                        <a href="/Shop/Index?id=@shop.Id" class="font-bold text-blue-500 hover:underline">@shop.Name</a>: @shop.TotalSales.ToString("N0").Replace(",", ".")₫
                    </li>
                }
            </ul>
        </div>

        <div class="dashboard-section rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-6 text-xl font-semibold text-gray-700">Type Distribution</h2>
            <div class="flex flex-col md:flex-row">
                <!-- Labels Column -->
                <div class="w-full md:w-1/3 pr-4">
                    <ul>
                        @for (int i = 0; i < Model.TypeDistributionLabels.Count; i++)
                        {
                            <li class="flex items-center mb-2">
                                <!-- Color Indicator -->
                                <span class="inline-block w-4 h-4 mr-2" style="background-color: @(backgroundColors[i % backgroundColors.Count])"></span>
                                <!-- Label Text -->
                                <span class="text-gray-700">@Model.TypeDistributionLabels[i]</span>
                            </li>
                        }
                    </ul>
                </div>
        
        <!-- Chart Column -->
        <div class="w-full md:w-2/3">
            <div class="relative h-64 md:h-full">
                <canvas id="typeDistributionChart" class="h-full w-full"></canvas>
            </div>
        </div>
    </div>
</div>

    </div>
</div>


@section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            // Sales Trend Chart
            var salesTrendCtx = document.getElementById('salesTrendChart').getContext('2d');
            var salesTrendChart = new Chart(salesTrendCtx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.SalesTrendDates)),
                    datasets: [{
                        label: 'Sales',
                        data: @Html.Raw(Json.Serialize(Model.SalesTrendData)),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true
                }
            });

            // Type Distribution Chart
    var backgroundColors = @Html.Raw(Json.Serialize(backgroundColors));

    var typeDistributionCtx = document.getElementById('typeDistributionChart').getContext('2d'); 
    var typeDistributionChart = new Chart(typeDistributionCtx, {
        type: 'pie',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.TypeDistributionLabels)),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.TypeDistributionData)),
                backgroundColor: backgroundColors.slice(0, @Model.TypeDistributionLabels.Count)
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
        </script>
}
