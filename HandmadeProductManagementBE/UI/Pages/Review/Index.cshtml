@page
@using HandmadeProductManagement.Core.Common
@model UI.Pages.Review.IndexModel
@{
	ViewData["Title"] = "Reviews";
    var userNames = new Dictionary<string, string>();
    var token = HttpContext.Session.GetString("Token");
}

<h1 class="mb-4 text-center text-4xl font-bold text-red-600">My Reviews</h1>

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="mb-4 rounded-lg p-4 @(Model.StatusMessage.StartsWith("Error") ? "bg-red-100 text-red-700" : "bg-green-100 text-green-700")">
        @Model.StatusMessage
    </div>
}

<div class="space-y-4">
    @foreach (var review in Model.Reviews)
    {
        <div class="rounded-lg border border-gray-300 bg-white p-4 shadow-md">

            <!-- Display product info at the top of the review -->
            @if (review.ProductId != null)
            {
                var product = await Model.GetProductByIdAsync(review.ProductId.ToString());

                @* Only display the product information if it exists *@
                @if (product != null)
                {
                    <div class="mb-4 flex items-center rounded-lg border bg-gray-200 px-2 py-2">
                        <!-- Wrap the entire product info in an anchor tag to make it clickable -->
                        <a href="/ProductDetail/ProductDetail?id=@product.Id" class="flex w-full items-center">
                            <img src="@product.ProductImageUrl" alt="Product Image" class="ml-2 mr-2 h-24 w-24 rounded-md object-cover" />
                            <div>
                                <h3 class="text-lg font-semibold">@product.Name</h3>
                                <p class="text-sm text-gray-500">@product.Description</p>
                            </div>
                        </a>
                    </div>
                }
                else
                {
                    <div class="mb-4">
                        <p class="text-sm text-red-600">Product not found.</p>
                    </div>
                }
            }

            <div class="flex flex-col">
                @{
                    // Kiểm tra và lấy UserName từ userId
                    if (!userNames.TryGetValue(review.UserId.ToString(), out var userName))
                    {
                        var user = await Model.GetUserByIdAsync(review.UserId.ToString());
                        userName = user?.UserName ?? "Unknown User";
                        userNames[review.UserId.ToString()] = userName;
                    }
                }
                <span class="font-semibold">@userName</span>
                <span class="text-sm text-gray-500">@review.Date?.ToString("g")</span>

                <!-- Hiển thị nội dung review và các thành phần khác -->
                <p class="mt-2">@review.Content</p>

                <!-- Display Rating as stars -->
                <div class="mt-2 flex items-center">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <svg class="h-5 w-5 @(i <= @review.Rating ? "text-yellow-500" : "text-gray-300")" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 .587l3.668 7.568 8.235 1.199-5.964 5.222L19.339 24 12 20.812 4.661 24l1.331-9.424-5.964-5.222 8.235-1.199L12 .587z" />
                        </svg>
                    }
                    <span class="ml-2 text-sm text-gray-500">(@review.Rating)</span>
                </div>
            </div>

            <!-- Reply Section with Shop ID -->
            @if (review.Reply != null)
            {
                <div class="relative ml-4 mt-4 rounded-lg border border-gray-300 bg-gray-50 p-2">
                    @{
                        var replyShop = Model.Shops.FirstOrDefault(shop => shop.Id == review.Reply?.ShopId);
                    }
                    <div class="mb-2 font-semibold text-gray-700">
                        @if (replyShop != null)
                        {
                            <a href="/Shop/Index?id=@replyShop.Id" class="text-blue-500 hover:underline">
                                @replyShop.Name
                            </a>
                        }
                        else
                        {
                            <span>Unknown Shop</span>
                        }
                    </div>
                    <p>@review.Reply.Content</p>
                </div>
            }

            <!-- Action Buttons (Updated) -->
            <div class="mt-4 flex justify-end space-x-4">
                <button data-review-id="@review.Id"
                        data-review-content="@review.Content"
                        data-review-rating="@review.Rating"
                        class="edit-review-btn rounded-md bg-blue-600 px-4 py-2 font-semibold text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Edit
                </button>
                <form method="post" asp-page="SoftDelete" asp-route-reviewId="@review.Id" class="inline">
                    <button type="submit"
                            class="rounded-md bg-red-600 px-4 py-2 font-semibold text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                            onclick="return confirm('Are you sure you want to delete this review?')">
                        Soft Delete
                    </button>
                </form>
            </div>
        </div>
    }
</div>

@if (Model.TotalPages > 1)
{
    <nav class="mt-4">
        <ul class="flex justify-center space-x-2">
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                    <a class="rounded-md border border-gray-300 px-4 py-2" class="page-link" asp-page="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }
        </ul>
    </nav>
}

<div id="editModal" class="fixed inset-0 hidden items-center justify-center bg-gray-600 bg-opacity-50">
    <div class="mx-4 w-full max-w-xl rounded-lg bg-white p-6 shadow-xl">
        <h2 class="mb-4 text-2xl font-bold text-gray-800">Edit Review</h2>
        <form method="post" asp-page-handler="EditReview">
            <input type="hidden" id="modalReviewId" name="reviewId" />
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">Content</label>
                    <textarea id="modalContent" name="content" rows="4"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Rating</label>
                    <div class="flex items-center space-x-2">
                        @for (var i = 1; i <= 5; i++)
                        {
                            <button type="button"
                                onclick="setModalRating(@i)"
                                class="modal-star-btn text-2xl transition-colors duration-200 focus:outline-none"
                                data-rating="@i">
                                ★
                            </button>
                        }
                    </div>
                    <input type="hidden" id="modalRating" name="rating" />
                </div>
                <div class="mt-4 flex justify-end space-x-3">
                    <button type="button" onclick="closeEditModal()"
                        class="rounded-md bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-200">
                        Cancel
                    </button>
                    <button type="submit"
                        class="rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700">
                        Save Changes
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    .modal-star-btn {
        color: #d1d5db;
        cursor: pointer;
    }
    .modal-star-btn.active {
        color: #fbbf24;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Add click handlers to all edit buttons
    document.querySelectorAll('.edit-review-btn').forEach(button => {
        button.addEventListener('click', function() {
            const reviewId = this.dataset.reviewId;
            const content = this.dataset.reviewContent;
            const rating = parseInt(this.dataset.reviewRating);
            openEditModal(reviewId, content, rating);
        });
    });
});

function openEditModal(reviewId, content, rating) {
    // Populate modal
    document.getElementById('modalReviewId').value = reviewId;
    document.getElementById('modalContent').value = content;
    setModalRating(rating);
    
    // Show modal
    document.getElementById('editModal').classList.remove('hidden');
    document.getElementById('editModal').classList.add('flex');
}

    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
        document.getElementById('editModal').classList.remove('flex');
    }

    function setModalRating(rating) {
        const stars = document.querySelectorAll('.modal-star-btn');
        document.getElementById('modalRating').value = rating;
        
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.add('active');
            } else {
                star.classList.remove('active');
            }
        });
    }
</script>
