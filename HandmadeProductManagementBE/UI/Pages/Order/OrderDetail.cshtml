@page
@model UI.Pages.Order.OrderDetailModel
@{
    ViewData["Title"] = "Order Detail";

    var statusList = Model.StatusChanges;
    var statusMapping = new List<KeyValuePair<string, string>>
    {
        new("Pending", "Order Placed"),
        new("Processing", "Order is being prepared"),
        new("Delivering", "Order is being shipped"),
        new("Delivery Failed", "Delivery Failed"),
        new("On Hold", "Order is on hold"),
        new("Delivering Retry", "Retrying Delivery"),
        new("Refund Requested", "Refund has been requested"),
        new("Refund Denied", "Refund request was denied"),
        new("Refund Approve", "Refund request was approved"),
        new("Refunded", "Order was refunded successfully"),
        new("Shipped", "Order was delivered successfully"),
        new("Canceled", "Order has been cancelled")
    };

    // Helper methods to get status information
    string GetStatusDate(DateTime changeTime) =>
        changeTime.ToString("dd MMM yyyy, HH:mm");

    bool IsStatusReached(string status) =>
        statusList.Any(s => s.Status == status);

    string GetOrderStatusMessage()
    {
        var lastStatus = statusList?.OrderByDescending(s => s.ChangeTime).FirstOrDefault()?.Status;
        return lastStatus switch
        {
            "Pending" => "Order Placed",
            "Processing" => "Order is being prepared",
            "Delivering" => "Order is being shipped",
            "Delivery Failed" => "Delivery Failed",
            "On Hold" => "Order is on hold",
            "Delivering Retry" => "Retrying Delivery",
            "Refund Requested" => "Refund has been requested",
            "Refund Denied" => "Refund request was denied",
            "Refund Approve" => "Refund request was approved",
            "Refunded" => "Order was refunded successfully",
            "Shipped" => "Order was delivered successfully",
            "Canceled" => "Order has been cancelled",
            _ => "Unknown Order Status"
        };
    }

    // Final list of statuses to display
    var finalStatuses = new List<KeyValuePair<string, Tuple<string, DateTime?>>>();

    if (!finalStatuses.Any(kv => kv.Key == "Pending"))
        finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>("Pending", new Tuple<string, DateTime?>("Order Placed", null)));

    if (!finalStatuses.Any(kv => kv.Key == "Processing"))
        finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>("Processing", new Tuple<string, DateTime?>("Order is being prepared", null)));

    if (!finalStatuses.Any(kv => kv.Key == "Delivering"))
        finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>("Delivering", new Tuple<string, DateTime?>("Order is being shipped", null)));


    bool isDeliveringAdded = true;

    foreach (var status in statusList)
    {
        if (status.Status == "Pending" || status.Status == "Processing")
        {
            var existingStatus = finalStatuses.FirstOrDefault(kv => kv.Key == status.Status);
            if (existingStatus.Key != null)
            {
                finalStatuses[finalStatuses.IndexOf(existingStatus)] =
                    new KeyValuePair<string, Tuple<string, DateTime?>>(
                        existingStatus.Key,
                        new Tuple<string, DateTime?>(existingStatus.Value.Item1, status.ChangeTime));
            }
        }

        if (status.Status == "Delivering" && isDeliveringAdded)
        {
            var existingStatus = finalStatuses.FirstOrDefault(kv => kv.Key == status.Status);
            if (existingStatus.Key != null)
            {
                finalStatuses[finalStatuses.IndexOf(existingStatus)] =
                    new KeyValuePair<string, Tuple<string, DateTime?>>(
                        existingStatus.Key,
                        new Tuple<string, DateTime?>(existingStatus.Value.Item1, status.ChangeTime));
            }
        }

        if (status.Status == "Delivering" && !isDeliveringAdded)
        {
            finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>("Delivering", new Tuple<string, DateTime?>("Order is being shipped", status.ChangeTime)));
        }
        else if (status.Status != "Pending" && status.Status != "Processing" && status.Status != "Delivering")
        {
            var matchingStatus = statusMapping.FirstOrDefault(kv => kv.Key == status.Status);
            if (matchingStatus.Key != null)
            {
                finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>(matchingStatus.Key, new Tuple<string, DateTime?>(matchingStatus.Value, status.ChangeTime)));
            }
            isDeliveringAdded = false;
        }

        if (status.Status == "Shipped" && !finalStatuses.Any(kv => kv.Key == "Shipped"))
            finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>("Shipped", new Tuple<string, DateTime?>("Order was delivered successfully", status.ChangeTime)));

    }

    if (!IsStatusReached("Shipped"))
    {
        finalStatuses.Add(new KeyValuePair<string, Tuple<string, DateTime?>>("Shipped", new Tuple<string, DateTime?>("Order was delivered successfully", null)));
    }


    if (IsStatusReached("Refund Requested"))
    {
        finalStatuses.RemoveAll(kv => kv.Key == "Shipped");
    }



}

<div class="flex items-center justify-between py-4">
    <a href="javascript:history.back()" class="text-lg font-semibold text-black hover:underline">← Return</a>
    <div class="text-lg font-semibold">Order Code: @Model.OrderId</div>
    @if (GetOrderStatusMessage() != "Order has been cancelled")
    {
        @if (GetOrderStatusMessage() == "Order was delivered successfully")
        {
            <div class="text-lg font-semibold text-green-700">@GetOrderStatusMessage()</div>
        } 
        else
        {
            <div class="text-lg font-semibold text-black">@GetOrderStatusMessage()</div>
        }
    }
</div>

<div class="mb-8 mt-6 h-[480px] gap-6 sm:mt-8 lg:mt-0">
    <div class="h-full space-y-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-black dark:bg-gray-200">
        <h3 class="text-xl font-semibold text-black">Order Information</h3>

        @if (finalStatuses.Any(kv => kv.Key == "Canceled"))
        {
            <p class="text-lg text-red-600">Order has been cancelled</p>
        }
        else
        {
            <div class="flex">
                <div class="w-1/3 space-y-4 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-200">
                    <p><strong>Name:</strong> @Model.OrderWithDetail.CustomerName</p>
                    <p><strong>Phone:</strong> @Model.OrderWithDetail.Phone</p>
                    <p><strong>Address:</strong> @Model.OrderWithDetail.Address</p>
                </div>

                <div class="border-l border-gray-300" style="margin: 0 30px;"></div>

                <div class="max-h-[370px] w-2/3 overflow-y-auto">
                    <ol class="relative ms-3 border-s border-gray-200 dark:border-gray-700">
                        @foreach (var status in finalStatuses.AsEnumerable().Reverse())
                        {
                            var statusDate = status.Value.Item2.HasValue ? GetStatusDate(status.Value.Item2.Value) : null;

                            <li class="mb-10 ms-6 @(IsStatusReached(status.Key) ? "text-blue-600" : "text-black")">
                                <span class="absolute -start-3 flex h-6 w-6 items-center justify-center rounded-full @(IsStatusReached(status.Key) ? "bg-blue-200" : "bg-gray-100")">
                                    <svg class="h-4 w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                        @if (IsStatusReached(status.Key))
                                        {
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11.917 9.724 16.5 19 7.5" />
                                        }
                                        else
                                        {
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
                                        }
                                        }
                                    </svg>
                                </span>
                                <h4 class="mb-0.5 text-base font-semibold @(IsStatusReached(status.Key) ? "text-blue-600" : "text-black")">
                                    @status.Value.Item1
                                </h4>
                                @if (statusDate != null)
                                {
                                    <p class="text-sm">@statusDate</p>
                                }
                            </li>
                        }
                    </ol>
                </div>
            </div>
        }
    </div>
</div>

<div class="order-details">
    <div class="flex items-center">
        <h3 class="text-xl font-semibold text-black">@Model.OrderWithDetail?.ShopName</h3>
        <button class="ml-4 rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600">
            View Shop
        </button>
    </div>
    @if (Model.OrderWithDetail?.OrderDetails != null && Model.OrderWithDetail.OrderDetails.Any())
    {
        foreach (var orderDetail in Model.OrderWithDetail.OrderDetails)
        {
            decimal totalPrice = orderDetail.DiscountPrice * orderDetail.ProductQuantity;

            <div class="order-detail my-2 flex h-24 items-center justify-between rounded border border-gray-300 p-2">
                <div class="flex w-1/3 items-center">
                    <img src="@orderDetail.ProductImage" alt="@orderDetail.ProductName" class="h-20 w-20" />
                </div>
                <div class="flex-1 mx-2 w-1/3">
                    <h2 class="text-lg font-bold">@orderDetail.ProductName</h2>
                    <p class="text-sm text-gray-600">
                        @string.Join(", ", orderDetail.VariationOptionValues)
                    </p>
                    <p class="text-sm">Quantity: x @orderDetail.ProductQuantity</p>
                </div>
                <div class="ml-4 flex w-1/3 flex-col items-end">
                    <p class="text-lg font-semibold">@totalPrice.ToString("C")</p>
                    <button class="mt-1 rounded bg-blue-500 px-4 py-2 text-white">Review</button>
                </div>
            </div>
        }

        <div class="mt-4 flex justify-end">
            <div class="text-lg font-semibold">
                Total Price: @Model.OrderWithDetail?.TotalPrice.ToString("C")
            </div>
        </div>
    }
    else
    {
        <p class="text-gray-600">No order details available.</p>
    }
</div>
